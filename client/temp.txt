{/* <span>
        <select name="cars" id="cars">
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
        </select>
        </span> */}


// dispatch(
    //   sendCartData(
    //     `${process.env.REACT_APP_BACKEND_URL}/cart/product/${id}`,
    //     "PUT",
    //     JSON.stringify({
    //       price: finalPrice,
    //       amount: 1,
    //     }),
    //     {
    //       "Content-Type": "application/json",
    //       Authorization: "Bearer " + auth.token,
    //     }
    //   )
    // );


// Index.js
/* <React.StrictMode></React.StrictMode> */

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();




const cartSlice = createSlice({
  name: "cart",
  initialState: {
    id:null,
    products: [],
    totalAmount: 0,
    totalQuantity: 0,
    changed:false,
    isLoading:false,
  },
  reducers: {
    setIsLoading(state,action){
      state.isLoading=action.payload.isLoading;
    },
    replaceCart(state, action) {
      state.id = action.payload.id;
      state.products = action.payload.products;
      state.totalQuantity = action.payload.totalQuantity;
      state.totalAmount= action.payload.totalAmount;
    },
    addItemToCart(state, action) { //using that logic in the backend
      const newItem = action.payload;
      const existingItem = state.products.find((item) => item.id === newItem.id);
      state.totalQuantity += newItem.amount;
      state.totalAmount += newItem.price * newItem.amount;
      state.changed = true;
      if (!existingItem) {
        state.products.push({
          id: newItem.id,
          amount: newItem.amount,
        });
      } else {
        existingItem.amount += newItem.amount;
      }
    },
    removeItemFromCart(state, action) { //using that logic in the backend
      const id = action.payload;
      const existingItem = state.products.find((item) => item.id === id);
      state.totalQuantity--;
      state.totalAmount -= existingItem.price
      state.changed = true;
      if (existingItem.amount === 1) {
        state.products = state.products.filter((item) => item.id !== id);
      } else {
        existingItem.amount--;
      }
    },
  },
});